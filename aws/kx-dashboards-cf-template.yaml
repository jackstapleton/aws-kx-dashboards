AWSTemplateFormatVersion: 2010-09-09
Description: Kx Dashboards Web App Stack
Parameters:

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Amazon EC2 Configuration"
        Parameters:
          - AMI
          - INSTANCETYPE
          - SSHKEY
      - Label:
          default: "General Configuration"
        Parameters:
          - SUBNETID1
          - SUBNETID2
          - VPCID

    ParameterLabels:
      AMI:
        default: "AMI Id"
      INSTANCETYPE:
        default: "EC2 Instance Type"
      SSHKEY:
        default: "SSH Key"
      SUBNETID1:
        default: "Subnet Id of Availability Zone 1"
      SUBNETID2:
        default: "Subnet Id of Availability Zone 2"
      VPCID:
        default: "VPC Id"

Parameters:
  AMI:
    Type: AWS::EC2::Image::Id
    Default: "ami-05b0cd6de7f8fc7ec"
    Description: "Choose the AMI to use for the EC2 Instances"
  INSTANCETYPE:
    Type: String
    Default: "t2.micro"
    ConstraintDescription: "Must be a valid EC2 Instance Type"
    Description: "Choose the Kx Dashboard EC2 Instance Type"
  SSHKEY:
    Type: AWS::EC2::KeyPair::KeyName
    Default: "aws-surface"
    Description: "Choose the ssh key that will be used to log on to the EC2 instances"
  SUBNETID1:
    Type: AWS::EC2::Subnet::Id
    Description: "Which Subnet should the EC2 Instances be deployed into in Availability Zone 1"
  SUBNETID2:
    Type: AWS::EC2::Subnet::Id
    Description: "Which Subnet should the EC2 Instances be deployed into in Availability Zone 2"
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: "Which VPC should the EC2 Instances be deployed into"

Resources:

  EC2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub '${AWS::Region}.ec2-asg.${AWS::StackName}'
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      MaxSize: 1
      MinSize: 0
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref EC2LaunchTemplate
            Version: 1
          Overrides:
            - InstanceType: !Ref INSTANCETYPE
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value: !Sub '${AWS::Region}.ec2-instance.${AWS::StackName}'
      TargetGroupARNs:
        - !Ref TargetGroup80
      VPCZoneIdentifier:
        - !Ref SUBNETID1
        - !Ref SUBNETID2

  EC2LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                VolumeSize: 10
        ImageId: !Ref AMI
        KeyName: !Ref SSHKEY
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
      LaunchTemplateName: !Sub '${AWS::Region}.ec2-launch-template.${AWS::StackName}'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group to allow SSH and TCP access for EC2 servers'
      GroupName: !Sub '${AWS::Region}.${AWS::StackName}.ec2-sg'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref VPCID

  EC2SecurityGroupHttpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: EC2SecurityGroup
    Properties:
      GroupId: !Ref EC2SecurityGroup
      FromPort: 80
      IpProtocol: tcp
      ToPort: 80
      SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EC2SecurityGroup
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref SUBNETID1
        - !Ref SUBNETID2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::Region}.elb.${AWS::StackName}'
      Type: application

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group to allow public http access through the load balancer'
      GroupName: !Sub '${AWS::Region}.${AWS::StackName}.elb-sg'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPCID

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup80
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Matcher:
        HttpCode: 200,302
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::Region}.elb-tg.${AWS::StackName}-80'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
      TargetType: instance
      VpcId: !Ref VPCID

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt ElasticLoadBalancer.DNSName
